-- The Chimera core library.

-- Infix operator are (always) left-associative,
-- so an expression of the form e1 OP e2 OP e3 is
-- equivalent to (e1 OP e2) OP e3. Partly (mostly)
-- because this is the simplest way to parse them :^)
--: a -> (a -> b) -> b
let (|>) = |x f| f x

--: (a -> b) -> a -> b
let (<|) = |f x| f x

-- Sequence two functions
--: (a -> b) -> (b -> c) -> a -> c
let (>>) = |f g x| g (f x)

-- (1) lambda-expression,this defintion expands to:
-- let (+) = fn |x: Int| -> Int -> Int do
--     fn |y: Int| -> Int do
--         @add x y
--     end
-- end
-- The @-things and their args are special expressions
-- whoose meaning is determined by the interpreter.
@[intrinsic(add)]
let (+) : Int -> Int -> Int
    = ...

@[intrinsic(sub)]
let (-) : Int -> Int -> Int
    = ...

@[intrinsic(mul)]
let (*) : Int -> Int -> Int
    = ...

@[intrinsic(div)]
let (/) : Int -> Int -> Int
    = ...

@[intrinsic(modulus)]
let (%) : Int -> Int -> Int
    = ...

@[intrinsic(cmp)]
let (==) : forall a. a -> a -> Bool
    = ...

-- (2) if-expression
--: Bool -> Bool
let not = |x| if x then false else true end

--: Bool -> Bool -> Bool
let (||) = |x y| if x then true else y end

--: Bool -> Bool -> Bool
let (&&) = |x y| if x then y else false end

--: a -> a -> Bool
let (!=) = |x y| not (x == y)

@[intrinsic(read)]
let read : Void -> Str
    = ...

@[intrinsic(print)]
let print : forall a. a -> Void
    = ...

let println = |x| do
    print x
    print '\n'
end

let hcf : Void -> Void = |_| do
    println "Halt and Catch Fire!"
    0 / 0
end

let (?) : forall a. a -> Str -> a = |e n| do
    print "[debug] "
    print n 
    print " = " 
    println e
    e
end

let (?=) : forall a. a -> a -> Void = |x y| do
    if x != y then
        println "[assert] failed equality check:"
        print "[assert] left  = "
        println x
        print "[assert] right = "
        println y
        hcf ()
    end
end

@[intrinsic(cons)]
let (::) : forall a. List a -> List a -> List a 
    = ...

@[intrinsic(head)]
let head : forall a. List a -> a 
    = ...

@[intrinsic(tail)]
let tail : forall a. List a -> List a
    = ...

--: (b -> a -> b) -> b -> [a] -> b
let foldl = |f acc xs| do
    if xs == [] then
        acc
    else
        let h = head xs
        let t = tail xs
        foldl f (f acc h) t
    end
end

--: (a -> b -> b) -> b -> [a] -> b
let foldr = |f acc xs| do
    if xs == [] then
        acc
    else
        let h = head xs
        let t = tail xs
        f h (foldr f acc t)
    end
end

--: (a -> b) -> [a] -> [b]
let map = |f xs| do
    if xs == [] then
        []
    else
        f (head xs) :: map f (tail xs)
    end
end

--: (a -> Bool) -> [a] -> [a]
let filter = |p xs| do
    let f = |x acc| if p x then
        x :: acc
    else
        acc
    end
    foldr f [] xs
end

--: (a -> b -> c) -> (b -> a -> c)
let flip = |f x y| f y x

--: a -> b -> a
let const = |x y| x

--: a -> a
let id = |x| x

--: [a] -> [a]
let reverse = |xs| foldl (flip (::)) [] xs

--: [a] -> [a] -> [a]
let (^) = |xs ys| foldr (::) ys xs

--: [[a]] -> [a]
let concat = |xs| foldr (^) [] xs

--: (a -> [b]) -> [a] -> [b]
let concat_map = |f xs| map f xs |> concat

--: [a] -> Int
let len = |xs| foldr (const ((+) 1)) 0 xs

--: [a] -> Bool
let any = |p xs| foldr (|x acc| p x || acc) false xs

--: [a] -> Bool
let all = |p xs| foldr (|x acc| p x && acc) true xs

let drop = |n xs| do
    if xs == [] then
        []
    elif n == 0 then
        xs
    else
        drop (n - 1) (tail xs)
    end
end

--: Int -> [a]
let take = |n xs| do
    if n == 0 then
        []
    else
        let h = head xs
        let t = tail xs
        h :: take (n - 1) t
    end
end

--: (a -> Bool) -> [a] -> [a]
let take_while = |p xs| do
    let f = |x acc| if p x then
        x :: acc
    else
        []
    end
    foldr f [] xs
end

--: Int -> Int -> [Int]
let (..) = |s e| do
    if s == e then
        []
    else
         s + 1 .. e |> (::) s
    end
end

let zip_with = |f xs ys| do
    if (xs == []) || (ys == []) then
        []
    else
        let z = f (head xs) (head ys)
        z :: zip_with f (tail xs) (tail ys)
    end
end

let (!!) = |xs n| do
    if n == 0 then
        head xs
    else
        tail xs !! n - 1
    end
end

let tests = do
    map ((+) 1) [1, 2, 3] ?= [2, 3, 4]

    let sum = |xs| foldr (+) 0 xs
    sum [1, 2, 3] ?= 6

    let even = |x| x % 2 == 0
    filter even [1, 2, 3, 4] ?= [2, 4]

    reverse [1, 2, 3] ?= [3, 2, 1]

    [1, 2] ^ [3] ?= [1, 2, 3]

    concat [[1], [2], [3]] ?= [1, 2, 3]

    let repeat = |x y| do
        if y == 0 then
            []
        else
            x :: repeat x (y - 1)
        end
    end
    repeat 0 3 ?= [0, 0, 0]
    concat_map (repeat 1) [1, 2, 3] |> len ?= sum [1, 2, 3]

    any ((==) 3) [1, 2, 3] ?= true
    all ((==) 3) [1, 2, 3] ?= false

    take 3 (1..10) ^ drop 3 (1..10) ?= (1..10)

    -- [1, 2, 3] !! 0 ?= 1
    -- [1, 2, 3] !! 1 ?= 2
end
